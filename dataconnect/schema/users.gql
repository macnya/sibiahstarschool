# Base User type for all roles
type User @fdc.table(name: "users") {
  userId: String! @fdc.primaryKey # This should be the Firebase Auth UID
  email: String! @fdc.unique
  firstName: String
  lastName: String
  role: UserRole! # Enum to define the type of user
  createdAt: Timestamp! @fdc.default(expression: "CURRENT_TIMESTAMP")
  updatedAt: Timestamp! @fdc.default(expression: "CURRENT_TIMESTAMP") @fdc.onUpdate(expression: "CURRENT_TIMESTAMP")

  studentProfile: StudentProfile @fdc.relationship(principalFields: ["userId"], foreignFields: ["userId"])
  parentLinksAsParent: [ParentStudentLink!] @fdc.relationship(principalFields: ["userId"], foreignFields: ["parentId"])
  parentLinksAsStudent: [ParentStudentLink!] @fdc.relationship(principalFields: ["userId"], foreignFields: ["studentId"])
  teacherAssignments: [TeacherClassAssignment!] @fdc.relationship(principalFields: ["userId"], foreignFields: ["teacherId"])
  enrollmentsAsStudent: [Enrollment!] @fdc.relationship(principalFields: ["userId"], foreignFields: ["studentId"]) # Renamed to avoid conflict with Class.enrollments
  gradesAsStudent: [Grade!] @fdc.relationship(principalFields: ["userId"], foreignFields: ["studentId"])
  gradesRecordedByTeacher: [Grade!] @fdc.relationship(principalFields: ["userId"], foreignFields: ["recordedById"])
}

enum UserRole {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

# Specific profile for students
type StudentProfile @fdc.table(name: "student_profiles") {
  userId: String! @fdc.primaryKey # Should be the same as User.userId for students
  user: User! @fdc.relationship(principalFields: ["userId"], foreignFields: ["userId"], onDelete: CASCADE)
  dateOfBirth: Date
  admissionDate: Date
  currentGradeLevel: String # e.g., "Grade 5", "PP1"
}

# Linking table for Parent-Student relationships
type ParentStudentLink @fdc.table(
  name: "parent_student_links",
  uniqueConstraints: [{ name: "unique_parent_student_pair", fields: ["parentId", "studentId"] }]
) {
  linkId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  parentId: String! # FK to User table (User.userId where role is PARENT)
  studentId: String! # FK to User table (User.userId where role is STUDENT)
  relationshipType: String # e.g., "Mother", "Father", "Guardian"

  parent: User! @fdc.relationship(principalFields: ["parentId"], foreignFields: ["userId"])
  student: User! @fdc.relationship(principalFields: ["studentId"], foreignFields: ["userId"])
}
