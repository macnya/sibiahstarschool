type Subject @fdc.table(name: "subjects") {
  subjectId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  subjectName: String! @fdc.unique
  description: String
}

type Class @fdc.table(
  name: "classes",
  uniqueConstraints: [{ name: "unique_class_name_per_year_grade", fields: ["className", "academicYear", "gradeLevel"] }]
) {
  classId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  className: String!
  gradeLevel: String!
  academicYear: String!

  enrollments: [Enrollment!] @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
  teacherAssignments: [TeacherClassAssignment!] @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
  grades: [Grade!] @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
  exams: [Exam!] @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
}

type Enrollment @fdc.table(
  name: "enrollments",
  uniqueConstraints: [{ name: "unique_student_class_enrollment", fields: ["studentId", "classId"] }]
) {
  enrollmentId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  studentId: String! # FK to User table (student's userId)
  classId: String!   # FK to Class table
  enrollmentDate: Date! @fdc.default(expression: "CURRENT_DATE")

  student: User! @fdc.relationship(principalFields: ["studentId"], foreignFields: ["userId"])
  class: Class! @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
}

type TeacherClassAssignment @fdc.table(
  name: "teacher_class_assignments",
  uniqueConstraints: [{ name: "unique_teacher_class_assignment", fields: ["teacherId", "classId"] }] # Assuming a teacher is assigned once to a class, specific subjects might be part of class name or another model
) {
  assignmentId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  teacherId: String!    # FK to User table (teacher's userId)
  classId: String!      # FK to Class table

  teacher: User! @fdc.relationship(principalFields: ["teacherId"], foreignFields: ["userId"])
  class: Class! @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
}

type Grade @fdc.table(name: "grades") {
  gradeId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  studentId: String!   # FK to User table (student's userId)
  classId: String!     # FK to Class table (context of the grade)
  subjectId: String!   # FK to Subject table
  term: String!        # e.g., "Term 1", "Mid-Term", "Final Assignment"
  score: String        # e.g., "A", "85%", or numeric score as string for flexibility
  comments: String
  recordedById: String! # FK to User table (teacher's userId who recorded it)
  recordedAt: Timestamp! @fdc.default(expression: "CURRENT_TIMESTAMP")

  student: User! @fdc.relationship(principalFields: ["studentId"], foreignFields: ["userId"])
  class: Class! @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
  subject: Subject! @fdc.relationship(principalFields: ["subjectId"], foreignFields: ["subjectId"])
  recordedBy: User! @fdc.relationship(principalFields: ["recordedById"], foreignFields: ["userId"])
}

type Exam @fdc.table(name: "exams") {
  examId: String! @fdc.primaryKey @fdc.default(expression: "gen_random_uuid()")
  examName: String!
  subjectId: String!
  classId: String       # FK to Class table, exam is for this class
  examDate: Date!
  details: String

  subject: Subject! @fdc.relationship(principalFields: ["subjectId"], foreignFields: ["subjectId"])
  class: Class! @fdc.relationship(principalFields: ["classId"], foreignFields: ["classId"])
}
