# Get data for the student dashboard
query GetStudentDashboardData($studentId: String!) {
  usersCollection(filter: { userId: { eq: $studentId }, role: { eq: STUDENT } }) {
    edges {
      node {
        userId
        firstName
        lastName
        studentProfile {
          currentGradeLevel
        }
        gradesAsStudent(orderBy: [{recordedAt: DescNullsLast}]) {
          edges {
            node {
              gradeId
              term
              score
              comments
              subject {
                subjectName
              }
              class {
                className
              }
            }
          }
        }
        # To get upcoming exams, we might need to query based on student's class enrollments
        # This query gets more complex and might need to fetch classes first
        # For simplicity, let's assume exams are directly queryable or linked differently
        # A direct Exam query filtered by class might be better here,
        # assuming we know the student's class(es)
      }
    }
  }
  # Example of fetching exams for a specific class (student's classId would be an input)
  # This shows an alternative way if exams are class-specific
  # You'd need the student's classId(s) first
  # examsCollection(filter: { classId: { eq: "someClassId" }, examDate: { gte: "YYYY-MM-DD" } }, orderBy: [{examDate: AscNullsFirst}]) {
  #   edges {
  #     node {
  #       examId
  #       examName
  #       examDate
  #       details
  #       subject {
  #         subjectName
  #       }
  #     }
  #   }
  # }
}